name: Sync Issue Metadata to PR

permissions:
  pull-requests: write
  contents: read
  issues: write
  project-cards: write

on:
  pull_request:
    types: [opened, edited, synchronize, reopened]

jobs:
  sync-metadata:
    runs-on: ubuntu-latest
    steps:
      - name: Find linked issue and sync metadata
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;

            // PR 정보 가져오기
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
            });

            const body = pr.body || '';
            const issueNumberMatch = body.match(/#(\d+)/);

            if (!issueNumberMatch) {
              console.log("❗ PR body에 연결된 이슈가 없습니다.");
              return;
            }

            const issueNumber = parseInt(issueNumberMatch[1], 10);

            // 이슈 정보 가져오기
            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
            });

            // 1️⃣ 라벨 가져오기
            const labels = issue.labels.map(label => label.name);

            // 2️⃣ 마일스톤 가져오기
            const milestoneNumber = issue.milestone ? issue.milestone.number : null;

            // 3️⃣ 어사이니 가져오기
            const assignees = issue.assignees.map(user => user.login);

            // PR 업데이트: 라벨, 마일스톤, 어사이니 복사
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              labels: labels,
              milestone: milestoneNumber,
              assignees: assignees,
            });

            console.log(`✅ 이슈 #${issueNumber}의 라벨, 마일스톤, 어사이니를 PR #${prNumber}에 복사 완료.`);

            // 4️⃣ 프로젝트 카드 복사
            // 저장소 프로젝트 가져오기
            const projects = await github.rest.projects.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            if (projects.data.length === 0) {
              console.log("❗ 저장소에 프로젝트가 없습니다.");
              return;
            }

            const project = projects.data[0]; // 첫 번째 프로젝트 사용 (필요하면 수정 가능)

            // 프로젝트 칼럼 가져오기
            const columns = await github.rest.projects.listColumns({
              project_id: project.id,
            });

            if (columns.data.length === 0) {
              console.log("❗ 프로젝트에 칼럼이 없습니다.");
              return;
            }

            const columnId = columns.data[0].id; // 첫 번째 칼럼 사용

            // PR이 이미 카드로 등록되어 있는지 체크
            const cards = await github.rest.projects.listCards({
              column_id: columnId,
            });

            const prCardAlreadyExists = cards.data.some(card => card.content_url && card.content_url.includes(`/pulls/${prNumber}`));

            if (prCardAlreadyExists) {
              console.log(`✅ PR #${prNumber}은 이미 프로젝트에 카드로 추가되어 있습니다.`);
              return;
            }

            // 카드로 추가
            await github.rest.projects.createCard({
              column_id: columnId,
              content_id: pr.id,
              content_type: "PullRequest",
            });

            console.log(`✅ PR #${prNumber}을 프로젝트 '${project.name}'에 카드로 추가했습니다.`);

