<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="store.oneul.mvc.feed.dao.FeedDAO">

    <!-- SELECT ONE -->
    <select id="getFeed" parameterType="map" resultType="FeedDTO">
        SELECT f.*, u.nickname 
        FROM feed f
        LEFT JOIN user u
          ON f.user_id = u.user.id
        WHERE f.challenge_id = #{challengeId} 
          AND f.id = #{id}
    </select>

    <!-- SELECT MY FEEDS -->
    <select id="getMyFeeds" resultType="FeedDTO">
        SELECT f.*, u.nickname 
        FROM feed f
        LEFT JOIN user u
          ON f.user_id = u.user_id
        WHERE f.user_id = #{userId}
        ORDER BY f.created_at DESC
    </select>

    <!-- SELECT COMMUNITY FEEDS -->
    <select id="getCommunityFeeds" resultType="CommunityFeedDTO">
        SELECT 
            f.*, 
            u.nickname, 
            u.profile_img
        FROM feed f
        LEFT JOIN user u
        ON f.user_id = u.user_id
        WHERE f.check_status = 'APPROVED'
        ORDER BY f.like_count DESC, f.created_at DESC
        LIMIT 12;
    </select>

    <!-- SELECT STREAK -->
    <select id="getStreak" resultType="StreakDTO">
        SELECT 
            DATE_FORMAT(created_at, '%Y-%m-%d') AS date,
            COUNT(*) AS count
        FROM feed   
        WHERE user_id = #{userId}
        AND check_status = 'APPROVED'
        GROUP BY DATE_FORMAT(created_at, '%Y-%m-%d')
        ORDER BY date DESC; 
    </select>
    

    <!-- SELECT ALL -->
    <select id="getFeeds" parameterType="map" resultType="FeedDTO">
        SELECT f.*, u.nickname 
        FROM feed f
        LEFT JOIN user u
          ON f.user_id = u.user_id
        WHERE f.challenge_id = #{challengeId}
        ORDER BY f.created_at DESC
    </select>

    <!-- INSERT -->
    <insert id="createFeed" parameterType="map">
        INSERT INTO feed (
            user_id,
            challenge_id,
            image_url,
            content
        )
        VALUES (
            #{feedDTO.userId},
            #{challengeId},
            #{feedDTO.imageUrl},
            #{feedDTO.content}
        )
    </insert>

    <!-- UPDATE -->
    <update id="updateFeed" parameterType="map">
        UPDATE feed
        SET user_id = #{userId}, challenge_id = #{challengeId}, image_url = #{imageUrl}, content = #{content}, like_count = #{likeCount}, created_at = #{createdAt}, check_status = #{checkStatus}, checked_at = #{checkedAt}
        WHERE challenge_id = #{challengeId} AND id = #{id}
    </update>
    
    <!-- UPDATE CHECK STATUS -->
    <update id="evaluateFeed" parameterType="FeedEvaluationRequest">
        UPDATE feed
        SET check_status = #{checkStatus}, checked_at = NOW()
        WHERE challenge_id = #{challengeId} AND id = #{id}
    </update>
    
    <!-- DELETE -->
    <delete id="deleteFeed" parameterType="map">
        DELETE FROM feed
        WHERE challenge_id = #{challengeId} AND id = #{id}
    </delete>

</mapper>
